checks:
  php: |-
    assertEqual(array(3, 4, 5, 1, 2), rotateSequence(2, array(1, 2, 3, 4, 5)));
    assertEqual(array(4, 5, 1, 2, 3), rotateSequence(-2, array(1, 2, 3, 4, 5)));
    assertEqual(array(2, 3, 4, 5, 1), rotateSequence(6, array(1, 2, 3, 4, 5)));
    assertEqual(array('b', 'c', 'a'), rotateSequence(1, array('a', 'b', 'c')));
    assertEqual(array('c', 'a', 'b'), rotateSequence(-4, array('a', 'b', 'c')));
  python: |-
    assert_equal([3, 4, 5, 1, 2], rotate_sequence(2, [1, 2, 3, 4, 5]))
    assert_equal([4, 5, 1, 2, 3], rotate_sequence(-2, [1, 2, 3, 4, 5]))
    assert_equal([2, 3, 4, 5, 1], rotate_sequence(6, [1, 2, 3, 4, 5]))
    assert_equal(['b', 'c', 'a'], rotate_sequence(1, ['a', 'b', 'c']))
    assert_equal(['c', 'a', 'b'], rotate_sequence(-4, ['a', 'b', 'c']))
  ruby: |-
    assert_equal([3, 4, 5, 1, 2], rotate_sequence(2, [1, 2, 3, 4, 5]))
    assert_equal([4, 5, 1, 2, 3], rotate_sequence(-2, [1, 2, 3, 4, 5]))
    assert_equal([2, 3, 4, 5, 1], rotate_sequence(6, [1, 2, 3, 4, 5]))
    assert_equal([:b, :c, :a], rotate_sequence(1, [:a, :b, :c]))
    assert_equal([:c, :a, :b], rotate_sequence(-4, [:a, :b, :c]))
  javascript: |-
    assertEqual([3, 4, 5, 1, 2], rotateSequence(2, [1, 2, 3, 4, 5]));
    assertEqual([4, 5, 1, 2, 3], rotateSequence(-2, [1, 2, 3, 4, 5]));
    assertEqual([2, 3, 4, 5, 1], rotateSequence(6, [1, 2, 3, 4, 5]));
    assertEqual(['b', 'c', 'a'], rotateSequence(1, ['a', 'b', 'c']));
    assertEqual(['c', 'a', 'b'], rotateSequence(-4, ['a', 'b', 'c']));
level: medium
tags: [seqs]
description: Write a function which can rotate a sequence in either direction.
